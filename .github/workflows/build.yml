# This is a basic workflow to help you get started with Actions
name: CMake PyLongQt

# Controls when the action will run. Manually triggered
on: workflow_dispatch


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
# This workflow contains a single job called "build"
  build:
# The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows Latest MSVC",
              os: windows-latest,
              build_type: "Release",
                #cc: "cl",
                #cxx: "cl",
              environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
                #              generators: "Visual Studio 17 2022",
              qt5_path: "./5.15.2/msvc2019_64/lib/cmake/Qt5",
              longqt-model: ./cmake,
            }
#          - {
#              name: "Ubuntu_Latest",
#              os: ubuntu-latest,
#              build_type: "Release",
#              cc: "gcc",
#              cxx: "g++",
#              generators: "Ninja",
#              longqt-model: ./share/cmake/LongQt-model,
#              qt5_path: "./5.15.2/gcc_64/lib/cmake/Qt5",
#            }
          - {
              name: "macOS Latest Clang",
              os: macos-latest,
              build_type: "Release",
                # cc: "clang",
                #              cxx: "clang++",
                #              generators: "Ninja",
              qt5_path: "./5.15.2/clang_64/lib/cmake/Qt5",
              longqt-model: ./share/cmake/LongQt-model,
            }
        python_version: ["3.9"]

    env:
      SKBUILD_CMAKE_ARGS: >-
        '-DCMAKE_BUILD_TYPE=${{ matrix.build_type }};
        -DLongQt-model_DIR:PATH=${{ matrix.config.longqt-model }};
        -DQt5_DIR:PATH=${{ matrix.config.qt5_path }};
        -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING="10.15";'

    steps:
  #      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download LongQt-model
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.ACC_LONGQT_MODEL}}
          workflow: build.yml
          name: LongQt-model-${{ runner.os }}
          repo: hundlab/LongQt-model

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo python.version: ${{ matrix.python_version }}
          echo env vars: $SKBUILD_CMAKE_ARGS

      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          python -m pip install aqtinstall build
          python -m aqt install 5.15.2 windows desktop win64_msvc2019_64
          cmd "${{ matrix.config.environment_script }}"

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install --assume-yes \
            build-essential \
            mesa-common-dev \
            libglu1-mesa-dev \
            ninja-build
          python -m aqt install 5.15.2 linux desktop gcc_64
          cmake --version
          gcc --version

      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          python -m pip install aqtinstall build
          python -m aqt install 5.15.2 mac desktop clang_64

      - name: Build Wheel
        shell: bash
        run: |
          python -m build --sdist --wheel

      - name: Upload PyLongQt
        uses: actions/upload-artifact@v2
        with:
          name: PyLongQt-${{ runner.os }} #-${{ github.sha }}
          path: ./dist

#      - name: Trigger ReadTheDocs Build
#        uses: dfm/rtds-action@v1
#        with:
#          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
#          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
#          commit_ref: ${{ github.ref }}
