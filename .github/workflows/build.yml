# This is a basic workflow to help you get started with Actions
name: CMake PyLongQt

# Controls when the action will run. Manually triggered
on: workflow_dispatch

env:
  CMAKE_INSTALL_PREFIX: ~/install


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs: 
# This workflow contains a single job called "build"
  build: 
# The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} 
    strategy:
      fail-fast: false
      matrix:
        config:
#          - {
#              name: "Windows Latest MSVC",
#              os: windows-latest,
#              build_type: "Release",
#              cc: "cl",
#              cxx: "cl",
#              environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
#              generators: "Visual Studio 16 2019",
#              qt5_path: "./5.15.2/msvc2019_64/lib/cmake/Qt5",
#              longqt-model: ./cmake,
#              python: py,
#            }
          - {
              name: "Ubuntu_Latest",
              os: ubuntu-latest,
              build_type: "Release",
              cc: "gcc",
              cxx: "g++",
              generators: "Unix Makefiles",
              longqt-model: ./share/cmake/LongQt-model,
              qt5_path: "./5.15.2/gcc_64/lib/cmake/Qt5",
              python: python3,
            }
#          - {
#              name: "macOS Latest Clang",
#              os: macos-latest,
#              build_type: "Release",
#              cc: "clang",
#              cxx: "clang++",
#              generators: "Ninja",
#              qt5_path: "./5.15.2/clang_64/lib/cmake/Qt5",
#              longqt-model: ./share/cmake/LongQt-model,
#              python: python3,
#            }
    
    steps:
  #      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download LongQt-model
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.ACC_LONGQT_MODEL}}
          workflow: build.yml
          name: LongQt-model-${{ runner.os }}
          repo: hundlab/LongQt-model

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          py -m pip install aqtinstall
          py -m aqt install 5.15.2 windows desktop win64_msvc2019_64
          cmake --version
          cmd "${{ matrix.config.environment_script }}"
 
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install --assume-yes build-essential mesa-common-dev libglu1-mesa-dev
          python3 -m pip install aqtinstall
          python3 -m aqt install 5.15.2 linux desktop gcc_64
          cmake --version
          gcc --version

      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install ninja
          python3 -m pip install aqtinstall
          python3 -m aqt install 5.15.2 mac desktop clang_64
          ninja --version
          cmake --version
          clang --version

      - name: Build Wheel
        shell: bash
        run: |
          ${{ matrix.config.python }} \
            setup.py build bdist_wheel -- \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DLongQt-model_DIR:PATH=${{ matrix.config.longqt-model }} \
            -DQt5_DIR:PATH=${{ matrix.config.qt5_path }} \
            -G "${{ matrix.config.generators }}"

      - name: Upload PyLongQt
        uses: actions/upload-artifact@v2
        with:
          name: PyLongQt-${{ runner.os }} #-${{ github.sha }}
          path: ./dist

#      - name: Trigger ReadTheDocs Build
#        uses: dfm/rtds-action@v1
#        with:
#          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
#          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
#          commit_ref: ${{ github.ref }}
