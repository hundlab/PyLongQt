
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_2D_grid_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_2D_grid_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_2D_grid_example.py:


*******************
1D Grid Simulation
*******************

This example illustrates how to setup and run a simple 1D grid simulation, 
also known as a fiber simulation with a row of cells. These simulations
show how the cell models interact rather than examining them in isolation. 2D
grids can be setup in the same fashion as 1D fibers, and there is also a more
advanced tutorial on seting up a 2D grid showing the possible customizations.

.. GENERATED FROM PYTHON SOURCE LINES 16-21

Setup & Run the Simulation
---------------------------

Import PyLongQt and create a grid protocol, this protocol can function for
1 or 2D simulations.

.. GENERATED FROM PYTHON SOURCE LINES 21-27

.. code-block:: default


    import PyLongQt as pylqt


    proto = pylqt.protoMap['Grid Protocol']()








.. GENERATED FROM PYTHON SOURCE LINES 28-32

To configure the size of the Fiber we will add one row and the number of
columns we would like to have for the simulation. Due to the detialed nature
of many of the cell models, larger fibers/grids may be very slow and 
computationally demanding.

.. GENERATED FROM PYTHON SOURCE LINES 32-38

.. code-block:: default


    proto.grid.addRow()
    proto.grid.addColumns(10)

    proto.grid





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Grid([Fiber([<Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>, <Node <Cell Type='Inexcitable Cell'>>])])



.. GENERATED FROM PYTHON SOURCE LINES 39-44

When new cells are added to the grid, they are automatically filled with a 
cell model called 'Inexcitable Cell', this cell acts like the edge of the
grid. It is not excited by its neighbors and cannot pass any signal between
them. To replace these cells with more interesting cells, we will create new
cell objects and place them in the grid.

.. GENERATED FROM PYTHON SOURCE LINES 46-47

To get the possible options for a node in a grid use

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    proto.grid[0,0].cellOptions()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['Inexcitable Cell', 'Canine Ventricular (Hund-Rudy 2009)', 'Canine Ventricular Border Zone (Hund-Rudy 2009)', 'Coupled Inexcitable Cell', 'Human Atrial (Courtemanche 1998)', 'Human Atrial (Grandi 2011)', 'Human Atrial (Koivumaki 2011)', 'Human Atrial (Onal 2017)', 'Human Ventricular (Grandi 10)', 'Human Ventricular (Ten Tusscher 2004)', "Human Ventricular Endocardium (O'Hara-Rudy 2011)", "Human Ventricular Epicardium (O'Hara-Rudy 2011)", "Human Ventricular Mid Myocardial (O'Hara-Rudy 2011)", 'Mammalian Ventricular (Faber-Rudy 2000)', 'Mouse Sinus Node (Kharche 2011)', 'Mouse Ventricular (Bondarenko 2004)', 'Rabbit Sinus Node (Kurata 2008)']



.. GENERATED FROM PYTHON SOURCE LINES 51-52

rather than

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default


    proto.cellOptions()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['']



.. GENERATED FROM PYTHON SOURCE LINES 56-60

as the cell cannot be set at the protocol level when there is a grid structure.

   At this time all nodes will have the same options, it is not necessary to
   check each node individually.

.. GENERATED FROM PYTHON SOURCE LINES 60-68

.. code-block:: default


    for col in range(proto.grid.columnCount()):
        node = proto.grid[0,col]
        node.setCellByName('Canine Ventricular (Hund-Rudy 2009)')

    proto.grid






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Grid([Fiber([<Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>, <Node <Cell Type='Canine Ventricular (Hund-Rudy 2009)'>>])])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.161 seconds)


.. _sphx_glr_download_auto_examples_plot_2D_grid_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_2D_grid_example.py <plot_2D_grid_example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_2D_grid_example.ipynb <plot_2D_grid_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
