
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\advanced_examples\plot_2D_grid_factors_conductances.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_advanced_examples_plot_2D_grid_factors_conductances.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_advanced_examples_plot_2D_grid_factors_conductances.py:


**************************************
2D Grid with factors and conductances
**************************************

This example illustrates how to setup and run a 2D grid simulation, using 
options to modify conductances and parameters for each cell. For this example
we will setup a grid with a non-conducting center.

.. GENERATED FROM PYTHON SOURCE LINES 14-20

Setup & Run the Simulation
---------------------------

First we will setup the simulation so that the border cells are all conducting 
cells while the internal cells are not excitable, creating a ring of excitable
cells

.. GENERATED FROM PYTHON SOURCE LINES 20-46

.. code-block:: default


    import PyLongQt as pylqt
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt

    proto = pylqt.protoMap['Grid Protocol']()

    n_cols = 5
    n_rows = 5

    proto.grid.addRows(n_rows)
    proto.grid.addColumns(n_cols)

    border_cells = {(i,0) for i in range(n_rows)} | \
        {(0,i) for i in range(n_cols)} | \
        {(i,4) for i in range(n_rows)} | \
        {(4,i) for i in range(n_cols)}

    for row,col in border_cells:
        node = proto.grid[row,col]
        node.setCellByName('Canine Ventricular (Hund-Rudy 2009)')

    proto.grid.simpleGrid()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (array([[0, 0, 0, 0, 0],
           [0, 1, 1, 1, 0],
           [0, 1, 1, 1, 0],
           [0, 1, 1, 1, 0],
           [0, 0, 0, 0, 0]]), {'Canine Ventricular (Hund-Rudy 2009)': 0, 'Inexcitable Cell': 1})



.. GENERATED FROM PYTHON SOURCE LINES 47-48

Lets only stimulate the middle cell in the 1st column

.. GENERATED FROM PYTHON SOURCE LINES 48-54

.. code-block:: default


    proto.stimNodes = {(2,0)}

    proto.stimt = 1000
    proto.stimval = -150








.. GENERATED FROM PYTHON SOURCE LINES 55-56

And add some measures for each of the excitable cells

.. GENERATED FROM PYTHON SOURCE LINES 56-63

.. code-block:: default


    proto.measureMgr.dataNodes = border_cells

    proto.measureMgr.addMeasure('vOld', {'peak', 'min', 'cl'})
    proto.measureMgr.addMeasure('iNa', {'min', 'avg'})
    proto.measureMgr.selection





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'iNa': {'min', 'avg'}, 'vOld': {'min', 'peak', 'cl'}}



.. GENERATED FROM PYTHON SOURCE LINES 64-65

and some traces

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default


    proto.cell.variableSelection = {'t', 'vOld', 'iNa'}








.. GENERATED FROM PYTHON SOURCE LINES 69-75

There are a few further customizations which we will show for the grid (they
are also available for a fiber). The first is the cell constants (called pvars,
such as the Factors used in the parameter sensitivity analysis example) which
allow for values of the parameters to be set. Unlike for the single cell,
the parameters are not for running multiple simulations, rather they are for
the spatial positioning of the parameter values across the grid.

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: default


    proto.pvars['InaFactor'] = proto.pvars.IonChanParam(proto.pvars.Distribution.none, 1, -0.05)
    proto.pvars.setStartCells('InaFactor', {(0,3)})
    proto.pvars.setMaxDistAndVal('InaFactor', 2, 1)








.. GENERATED FROM PYTHON SOURCE LINES 81-95

The first line above adds a rule for the sodium current. The first argument is
the starting value and the second is how much the value should decrease for
each node of distance it moves away from the starting cell. The starting cell
has not yet been set and the default behavior is for every cell to be a start
cell. To fix this we set a single start cell on the next line using the
:py:meth:`setStartCells` method.

We can also set limitations on the cells that will be effected, by limiting
the maximum distance at which the rule will be applied, and the maximum
value that the rule will apply. These are the first and second arguments of
the next line restricting the distance to two steps away, and not changing
the maximum value.

Now lets create a small visualization of how all these rules will be applied

.. GENERATED FROM PYTHON SOURCE LINES 95-102

.. code-block:: default


    vis = np.ones(proto.grid.shape)
    cells_list = list(proto.pvars['InaFactor'].cells.keys())
    idx_list = tuple(zip(*cells_list))
    vis[idx_list] = list(proto.pvars['InaFactor'].cells.values())
    vis





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[1.  , 0.9 , 0.95, 1.  , 0.95],
           [1.  , 1.  , 1.  , 1.  , 0.9 ],
           [1.  , 1.  , 1.  , 1.  , 1.  ],
           [1.  , 1.  , 1.  , 1.  , 1.  ],
           [1.  , 1.  , 1.  , 1.  , 1.  ]])



.. GENERATED FROM PYTHON SOURCE LINES 103-131

Notice that the rule is not being applied to the inexcitable cells. This is 
because PyLongQt checks whether each cell has the ion channel constant and only
applies the rule to those cells.

.. note::
   The pvars settings can also be used to apply arbitrary values to the cells
   during the setup process by manually changing 
   `proto.pvars['InaFactor'].cells`. In this case the rules may indicate that
   a change will be applied to a cell, which doesn't have that ion channel. That
   assignment will be ignored when the simulation is being run.

The other optional configuration is to change the conductances between cells.
Setting conductances to smaller values will reduce the influence of cells on
their neighbor, while setting them to larger values will do the oppisite.
Choosing to set a conductance to 0 will completely remove any effect of those
two cells on each other. Conductances are also symmetric, so a cell's right
side conductance is its right-hand neighbors left conductance. When setting
conductances this will be updated automatically. Conductances on the boarder
of the Grid will always be 0, and cannot be changed. Similarly, inexcitable
cells will always have a conductance of 0 with all of their neighbors. For
this example we will reduce the conductance between the nodes on the top and
bottom of our ring of cells. One way to accomplish this is to set the 
conductivitiy value directly using :py:meth:`Node.setConductivityDirect`.
This is a direct method as the value is set given the provided value regardless
of the cell's properties. Another way to change the conductance is to set
the resistivity using :py:meth:`Node.setResistivity`. Using this method,
we change the gap junction resistance by a percentage which will impact the
conductivity while still using a physiological calculation.

.. GENERATED FROM PYTHON SOURCE LINES 131-136

.. code-block:: default


    for i in range(proto.grid.columnCount()):
        node = proto.grid[0,i]
        node.setResistivity(pylqt.right, percentage=120)








.. GENERATED FROM PYTHON SOURCE LINES 137-138

Now the simulation is all setup and can be run.

.. GENERATED FROM PYTHON SOURCE LINES 138-144

.. code-block:: default


    sim_runner = pylqt.RunSim()
    sim_runner.setSims(proto)
    sim_runner.run()
    sim_runner.wait()








.. GENERATED FROM PYTHON SOURCE LINES 145-149

Plot the Results
----------------

Disable future warnings to avoid excess outputs from plotting

.. GENERATED FROM PYTHON SOURCE LINES 150-154

.. code-block:: default


    import warnings
    warnings.simplefilter(action='ignore', category=FutureWarning)








.. GENERATED FROM PYTHON SOURCE LINES 155-156

The data can once again be read using :py:class:`DataReader`.

.. GENERATED FROM PYTHON SOURCE LINES 156-159

.. code-block:: default


    [trace], [meas] = pylqt.DataReader.readAsDataFrame(proto.datadir)








.. GENERATED FROM PYTHON SOURCE LINES 160-161

Then we will calculate the distance from the simulus for each border cell

.. GENERATED FROM PYTHON SOURCE LINES 161-169

.. code-block:: default


    dists = dict()
    stim_cell = np.array((2,0))
    for cell in border_cells:
        diff = np.array(cell) - stim_cell
        dist = np.sum(np.abs(diff))
        dists[cell] = dist








.. GENERATED FROM PYTHON SOURCE LINES 170-172

We can use the trace Dataframe to produce traces of each of the action
potenitals in the fiber and color them by their location in the fiber

.. GENERATED FROM PYTHON SOURCE LINES 172-186

.. code-block:: default


    plt.figure()
    colors = plt.cm.jet_r(np.linspace(0,1,max(dists.values())+1))
    for cell in sorted(border_cells, key=lambda x: dists[x]):
        trace_subset = trace[trace[(cell,'t')] < 4_250]
        plt.plot(trace_subset[(cell,'t')],
                 trace_subset[(cell,'vOld')],
                 color=colors[dists[cell]],
                 label=str(cell))
    plt.xlabel('Time (ms)')
    plt.ylabel('Voltage (mV)')
    _ = plt.legend()





.. image:: /auto_examples/advanced_examples/images/sphx_glr_plot_2D_grid_factors_conductances_001.png
    :alt: plot 2D grid factors conductances
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 187-188

Then let's create one more plot to show the action potential propagation.

.. GENERATED FROM PYTHON SOURCE LINES 188-201

.. code-block:: default


    plt.figure()
    colors = plt.cm.jet_r(np.linspace(0,1,max(dists.values())+1))
    for cell in sorted(border_cells, key=lambda x: dists[x]):
        trace_subset = trace[trace[(cell,'t')] < 4_010]
        plt.plot(trace_subset[(cell,'t')],
                 trace_subset[(cell,'vOld')],
                 color=colors[dists[cell]],
                 label=str(cell))
    plt.xlabel('Time (ms)')
    plt.ylabel('Voltage (mV)')
    _ = plt.legend()




.. image:: /auto_examples/advanced_examples/images/sphx_glr_plot_2D_grid_factors_conductances_002.png
    :alt: plot 2D grid factors conductances
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.142 seconds)


.. _sphx_glr_download_auto_examples_advanced_examples_plot_2D_grid_factors_conductances.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_2D_grid_factors_conductances.py <plot_2D_grid_factors_conductances.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_2D_grid_factors_conductances.ipynb <plot_2D_grid_factors_conductances.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
